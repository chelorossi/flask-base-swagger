openapi: 3.0.0
servers:
  - url: 'http://192.168.99.100/v1'
    description: Development server
info:
  description: |
    Flask Base API - Swagger spec for documenting the flask-base API
  version: 1.0.0
  title: Flask Base API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mtn.barreto@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /ping:
    get:
      description: Just a sanity check
      responses:
        '200':
          description: Will return 'pong222!'
      security: []
  /users:
    post:
      description: adds a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: email was added
        '400':
          description: Sorry. That email or username already exists.
    get:
      description: Returns all users
      responses:
        '200':
          description: array user object
  '/users/{userId}':
    get:
      description: Returns a user based on a single user ID
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - in: header
          name: Accept
          schema:
            type: string
            default: application/json
          required: true
      responses:
        '200':
          description: user object
        '404':
          description: '''User does not exist.'
  /auth/register:
    post:
      description: Creates a new user
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            default: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: user object
        '400':
          description: '''Sorry. That user already exists.'
      security: []
  /auth/login:
    post:
      description: Logs a user in
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            default: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successfully logged in
        '404':
          description: '''User does not exist.'''
      security: []
  /auth/logout:
    get:
      description: Logs a user out
      responses:
        '200':
          description: Successfully logged out
  /auth/status:
    get:
      description: Returns the logged in user's status
      responses:
        '200':
          description: user object
  /auth/password_recovery:
    post:
      description: >-
        creates a password_recovery_hash and sends email to user (assumes
        login=email)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecovery'
      responses:
        '200':
          description: Successfully sent email with password recovery.
      security: []
  /auth/password:
    put:
      description: reset user password (assumes login=email)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Successfully reseted password.
      security: []
  /auth/facebook/login:
    post:
      description: >-
        logs in user using fb_access_token returning the corresponding JWT if
        user does not exist registers/creates a new one
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookLogin'
      responses:
        '200':
          description: Successfully facebook login.
      security: []
  /auth/cellphone:
    post:
      description: >-
        generates cellphone_validation_code, idempotent (could be used for
        resend cellphone_validation_code) allows just 1 user per cellphone
        validation!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCellphone'
      responses:
        '200':
          description: Successfully sent validation code.
  /auth/cellphone/verify:
    put:
      description: >-
        verifies cellphone_validation_code, idempotent (could be used many
        times)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCellphone'
      responses:
        '200':
          description: Successful cellphone validation.
  /devices:
    post:
      description: creates or updates a device on the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device successfully registered.
  /devices/<device_id>:
    put:
      description: >-
        creates/updates and associates the device device_id to the user
        logged_in_user_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device successfully registered.
      security: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
          format: date-time
    UserRegister:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: UserRegister
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: UserLogin
    PasswordRecovery:
      type: object
      required:
        - email
      properties:
        email:
          type: string
      xml:
        name: PasswordRecovery
    PasswordReset:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string
      xml:
        name: PasswordReset
    FacebookLogin:
      type: object
      required:
        - fb_access_token
      properties:
        fb_access_token:
          type: string
      xml:
        name: FacebookLogin
    RegisterCellphone:
      type: object
      required:
        - cellphone_number
        - cellphone_cc
      properties:
        cellphone_number:
          type: string
        cellphone_cc:
          type: string
      xml:
        name: RegisterCellphone
    VerifyCellphone:
      type: object
      required:
        - validation_code
      properties:
        validation_code:
          type: string
      xml:
        name: VerifyCellphone
    Device:
      type: object
      required:
        - device_id
        - device_type
        - pn_token
      properties:
        device_id:
          type: string
        device_type:
          type: string
        pn_token:
          type: string
      xml:
        name: Device
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserRegister'
      description: List of user object
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
